/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views;

import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author matos
 */
public class MantenimientoDoc extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public MantenimientoDoc() {
        initComponents();
        this.setLocationRelativeTo(null);
        setTitle("InteliAccounting Documentos");
        setResizable(false);
        cargarDatosDesdeArchivo();
        jTable1.getSelectionModel().addListSelectionListener(e -> {
            tablaSeleccionada(e);
            Borrar.setEnabled(e.getFirstIndex() >= 0); // Habilitar el bot√≥n de borrar si hay una fila seleccionada
        });
        Modificar.setEnabled(false);
        Borrar.setEnabled(false);

         Des.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyTyped(java.awt.event.KeyEvent evt) {
            char caracter = evt.getKeyChar();
            if (!Character.isLetter(caracter) && caracter != KeyEvent.VK_BACK_SPACE) {
                evt.consume();
            }
        }
    });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Cod = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Des = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        Borrar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Enviar = new javax.swing.JButton();
        Modificar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(165, 250, 250));
        jPanel1.setForeground(new java.awt.Color(204, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 2, 24)); // NOI18N
        jLabel1.setText("Codigo");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 123, 32));

        Cod.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Cod.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                CodFocusLost(evt);
            }
        });
        Cod.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                CodKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                CodKeyTyped(evt);
            }
        });
        jPanel1.add(Cod, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 80, 320, 32));
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(375, 20, -1, -1));
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(452, 26, 108, 31));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 2, 24)); // NOI18N
        jLabel2.setText("Descripcion");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 200, -1, -1));

        Des.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.add(Des, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 190, 320, 32));

        jButton4.setFont(new java.awt.Font("Times New Roman", 2, 15)); // NOI18N
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img2/borrar.png"))); // NOI18N
        jButton4.setText("Limpiar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 270, 120, 40));

        jButton3.setFont(new java.awt.Font("Dubai Medium", 3, 11)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img3/salida.png"))); // NOI18N
        jButton3.setBorder(null);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 270, 80, 40));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img2/examen.png"))); // NOI18N
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 180, 60, 50));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img2/impuesto (2).png"))); // NOI18N
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 70, 60, 50));

        Borrar.setFont(new java.awt.Font("Times New Roman", 2, 15)); // NOI18N
        Borrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img3/desarrollo-de-producto.png"))); // NOI18N
        Borrar.setText("Borrar");
        Borrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrarActionPerformed(evt);
            }
        });
        jPanel1.add(Borrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 270, -1, 40));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Codigo", "Descripcion"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 310, 730, 200));

        Enviar.setFont(new java.awt.Font("Times New Roman", 2, 15)); // NOI18N
        Enviar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img2/enviar.png"))); // NOI18N
        Enviar.setText("  Enviar");
        Enviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnviarActionPerformed(evt);
            }
        });
        jPanel1.add(Enviar, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 270, 130, 40));

        Modificar.setFont(new java.awt.Font("Times New Roman", 2, 15)); // NOI18N
        Modificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img3/editar.png"))); // NOI18N
        Modificar.setText("Modificar");
        Modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificarActionPerformed(evt);
            }
        });
        jPanel1.add(Modificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 270, -1, 40));
        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 270, 730, 40));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 730, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void cargarDatosDesdeArchivo() {
        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
        modelo.setRowCount(0);

        try {
            String filePath = "Mantenimiento de documento.txt";
            File archivo = new File(filePath);

            if (archivo.exists()) {
                BufferedReader br = new BufferedReader(new FileReader(archivo));
                String linea;

                while ((linea = br.readLine()) != null) {
                    String[] partes = linea.split(";");
                    if (partes.length >= 2) {
                        String codigo = partes[0];
                        String descripcion = partes[1];
                        modelo.addRow(new Object[]{codigo, descripcion});
                    }
                }

                br.close();
            } else {
                System.out.println("El archivo no existe.");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void tablaSeleccionada(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            int selectedRow = jTable1.getSelectedRow();
            if (selectedRow >= 0) {
                String codigo = jTable1.getValueAt(selectedRow, 0).toString();
                String descripcion = jTable1.getValueAt(selectedRow, 1).toString();

                Cod.setText(codigo);
                Des.setText(descripcion);
                Modificar.setEnabled(true);
                Borrar.setEnabled(true); // Habilitar el bot√≥n de borrar
            } else {
                Modificar.setEnabled(false);
                Borrar.setEnabled(false); // Inhabilitar el bot√≥n de borrar si no hay fila seleccionada
            }
        }
    }
    private void EnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnviarActionPerformed
        String codigo = Cod.getText();
        String desc = Des.getText();

        if (!codigo.isEmpty() && !desc.isEmpty()) {
            try {
                String filePath = "Mantenimiento de documento.txt";
                File archivo = new File(filePath);

                boolean encontrado = false;
                String contenidoArchivo = "";
                if (archivo.exists()) {
                    contenidoArchivo = new String(Files.readAllBytes(archivo.toPath()));
                    encontrado = contenidoArchivo.contains(codigo + ";");
                }

                if (encontrado) {
                    JOptionPane.showMessageDialog(this, "El c√≥digo ya existe en el archivo.", "Guardar", JOptionPane.WARNING_MESSAGE);
                } else {
                    FileWriter f = new FileWriter(filePath, true); // Usamos "true" para que agregue al final del archivo
                    BufferedWriter bw = new BufferedWriter(f);

                    bw.write(codigo + ";" + desc);
                    bw.newLine();
                    bw.close();

                    JOptionPane.showMessageDialog(this, "Datos guardados exitosamente.", "Guardar", JOptionPane.INFORMATION_MESSAGE);
                    LimpiarCampos();

                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al guardar los datos.", "Guardar", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese el c√≥digo y la descripci√≥n.", "Guardar", JOptionPane.WARNING_MESSAGE);
        }
        cargarDatosDesdeArchivo();
        Borrar.setEnabled(false);

    }//GEN-LAST:event_EnviarActionPerformed

    private void LimpiarCampos() {
        Cod.setText("");
        Des.setText("");
    }
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.setVisible(false);
        dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void BorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrarActionPerformed
        int confirmacion = JOptionPane.showConfirmDialog(
                this,
                "¬øEst√° seguro de que desea eliminar los datos?",
                "Confirmar Borrado",
                JOptionPane.YES_NO_OPTION
        );

        if (confirmacion == JOptionPane.YES_OPTION) {
            String codigo = Cod.getText();

            if (!codigo.isEmpty()) {
                try {
                    String filePath = "Mantenimiento de documento.txt";
                    File archivo = new File(filePath);

                    if (archivo.exists()) {
                        String contenidoArchivo = new String(Files.readAllBytes(archivo.toPath()));
                        String nuevoContenido = "";

                        String[] lineas = contenidoArchivo.split("\\n");
                        for (String linea : lineas) {
                            if (!linea.startsWith(codigo + ";")) {
                                nuevoContenido += linea + "\n";
                            }
                        }

                        FileWriter f = new FileWriter(filePath);
                        BufferedWriter bw = new BufferedWriter(f);

                        bw.write(nuevoContenido);
                        bw.close();

                        JOptionPane.showMessageDialog(this, "Datos borrados exitosamente.", "Borrar", JOptionPane.INFORMATION_MESSAGE);
                        cargarDatosDesdeArchivo();
                    } else {
                        JOptionPane.showMessageDialog(this, "El archivo no existe.", "Borrar", JOptionPane.WARNING_MESSAGE);
                    }
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "Error al borrar los datos.", "Borrar", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Por favor, ingrese el c√≥digo.", "Borrar", JOptionPane.WARNING_MESSAGE);
            }
            LimpiarCampos();
        }

    }//GEN-LAST:event_BorrarActionPerformed

    private void CodFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CodFocusLost
        String codigo = Cod.getText();

        if (!codigo.isEmpty()) {
            try {
                String filePath = "Mantenimiento de documento.txt";
                File archivo = new File(filePath);

                boolean encontrado = false;
                String contenidoArchivo = "";
                if (archivo.exists()) {
                    contenidoArchivo = new String(Files.readAllBytes(archivo.toPath()));
                    String[] lineas = contenidoArchivo.split("\\n");
                    for (String linea : lineas) {
                        if (linea.startsWith(codigo + ";")) {
                            String[] partes = linea.split(";");
                            if (partes.length > 1) {
                                Des.setText(partes[1]);
                            }
                            encontrado = true;
                            break;
                        }
                    }
                }

                if (!encontrado) {
                    Des.setText("");
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_CodFocusLost

    private void ModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificarActionPerformed
        String codigo = Cod.getText();
        String nuevaDescripcion = Des.getText();

        if (!codigo.isEmpty() && !nuevaDescripcion.isEmpty()) {
            try {
                String filePath = "Mantenimiento de documento.txt";
                File archivo = new File(filePath);

                if (archivo.exists()) {
                    String contenidoArchivo = new String(Files.readAllBytes(archivo.toPath()));
                    String nuevoContenido = "";

                    String[] lineas = contenidoArchivo.split("\\n");
                    for (String linea : lineas) {
                        if (linea.startsWith(codigo + ";")) {
                            nuevoContenido += codigo + ";" + nuevaDescripcion + "\n";
                        } else {
                            nuevoContenido += linea + "\n";
                        }
                    }

                    FileWriter f = new FileWriter(filePath);
                    BufferedWriter bw = new BufferedWriter(f);

                    bw.write(nuevoContenido);
                    bw.close();

                    JOptionPane.showMessageDialog(this, "Datos modificados exitosamente.", "Modificar", JOptionPane.INFORMATION_MESSAGE);
                    cargarDatosDesdeArchivo();
                } else {
                    JOptionPane.showMessageDialog(this, "El archivo no existe.", "Modificar", JOptionPane.WARNING_MESSAGE);
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al modificar los datos.", "Modificar", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese el c√≥digo y la nueva descripci√≥n.", "Modificar", JOptionPane.WARNING_MESSAGE);
        }
        LimpiarCampos();
        cargarDatosDesdeArchivo();

    }//GEN-LAST:event_ModificarActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        LimpiarCampos();
        Modificar.setEnabled(false);
        Borrar.setEnabled(false);

    }//GEN-LAST:event_jButton4ActionPerformed

    private void CodKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CodKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_CodKeyReleased

    private void CodKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CodKeyTyped
        char caracter = evt.getKeyChar();

        if (((caracter < '0' || caracter > '9'))
                && (caracter != KeyEvent.VK_BACK_SPACE)) {
            evt.consume();
        }    }//GEN-LAST:event_CodKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Borrar;
    private javax.swing.JTextField Cod;
    private javax.swing.JTextField Des;
    private javax.swing.JButton Enviar;
    private javax.swing.JButton Modificar;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
