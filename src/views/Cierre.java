package views;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author matos
 */
public class Cierre extends javax.swing.JFrame {

    /**
     * Creates new form Cierre
     */
    public Cierre() {
        initComponents();
        setTitle("InteliAccounting Cierre Diario");
        this.setLocationRelativeTo(null);

        setResizable(false);
        jButton2.setEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        DesdeF = new com.toedter.calendar.JDateChooser();
        DesdeF1 = new com.toedter.calendar.JDateChooser();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 2, 24)); // NOI18N
        jLabel1.setText("Desde");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 2, 24)); // NOI18N
        jLabel2.setText("Hasta");

        DesdeF.setDateFormatString("yy/MM/dd");

        DesdeF1.setDateFormatString("yy/MM/dd");

        jButton1.setText("Buscar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Numero Documento", "Fecha de Documento", "Tipo de Documento", "Descripcion", "Hecho por", "Monto Transaccion", "Fecha", "Estatus"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Tabla);

        jButton2.setText("Cierre");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DesdeF, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(77, 77, 77)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DesdeF1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(59, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DesdeF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DesdeF1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 905, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 2, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 3, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 550, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        buscarRegistros();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        realizarCierre();


    }//GEN-LAST:event_jButton2ActionPerformed
    private void realizarCierre() {
        DefaultTableModel model = (DefaultTableModel) Tabla.getModel();

        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(Cierre.this, "No hay datos para hacer el cierre.", "No hay datos", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String fechaActualizacion = dateFormat.format(new Date()); // Obtiene la fecha actual

        String direccion = "C:\\Users\\amatos\\Desktop\\New folder (3)\\A\\InteliAccounting-AYDIO\\Cabezera Transaccion Contable.txt";

        ArrayList<String> lines = new ArrayList<>();
        try ( BufferedReader br = new BufferedReader(new FileReader(direccion))) {
            String line;
            while ((line = br.readLine()) != null) {
                lines.add(line);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            return;
        }

        for (int i = 0; i < model.getRowCount(); i++) {
            Object[] rowData = new Object[model.getColumnCount()];
            for (int j = 0; j < model.getColumnCount(); j++) {
                rowData[j] = model.getValueAt(i, j);
            }

            Date currentDate;
            try {
                currentDate = dateFormat.parse((String) rowData[1]);
            } catch (Exception ex) {
                ex.printStackTrace();
                continue;
            }

            for (int j = 0; j < lines.size(); j++) {
                String[] parts = lines.get(j).split(";");
                Date existingDate;
                try {
                    existingDate = dateFormat.parse(parts[1]);
                } catch (Exception ex) {
                    ex.printStackTrace();
                    continue;
                }

                if (currentDate.equals(existingDate) && parts[7].equals("No Actualizado")) {
                    parts[7] = "Actualizado";
                    parts[6] = fechaActualizacion; // Actualiza la fecha de la última modificación
                    lines.set(j, String.join(";", parts));
                    break;
                }
            }
        }

        try ( BufferedWriter bw = new BufferedWriter(new FileWriter(direccion))) {
            for (String line : lines) {
                bw.write(line);
                bw.newLine();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        model.setRowCount(0);
        jButton2.setEnabled(false);
        JOptionPane.showMessageDialog(Cierre.this, "Cierre realizado correctamente.", "Cierre Exitoso", JOptionPane.INFORMATION_MESSAGE);
    }

    private void buscarRegistros() {
        Date fromDate = DesdeF.getDate();
        Date toDate = DesdeF1.getDate();

        if (fromDate == null || toDate == null) {
            JOptionPane.showMessageDialog(Cierre.this, "Selecciona ambas fechas válidas.", "Error de fecha", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (toDate.before(fromDate)) {
            JOptionPane.showMessageDialog(Cierre.this, "La fecha 'Hasta' no puede ser anterior a la fecha 'Desde'.", "Error de fecha", JOptionPane.ERROR_MESSAGE);
            return;
        }

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        String direccion = "C:\\Users\\amatos\\Desktop\\New folder (3)\\A\\InteliAccounting-AYDIO\\Cabezera Transaccion Contable.txt";

        ArrayList<String[]> filteredData = new ArrayList<>();
        try ( BufferedReader br = new BufferedReader(new FileReader(direccion))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(";");
                Date currentDate = dateFormat.parse(parts[1]);
                if (!currentDate.before(fromDate) && !currentDate.after(toDate) && parts[7].equals("No Actualizado")) {
                    filteredData.add(parts);
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        DefaultTableModel model = (DefaultTableModel) Tabla.getModel();
        model.setRowCount(0); // Clear previous data
        for (String[] parts : filteredData) {
            Object[] rowData = new Object[parts.length];
            for (int i = 0; i < parts.length; i++) {
                if (i == 1) {
                    try {
                        rowData[i] = dateFormat.format(dateFormat.parse(parts[i]));
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        rowData[i] = parts[i];
                    }
                } else {
                    rowData[i] = parts[i];
                }
            }
            model.addRow(rowData);
        }

        jButton2.setEnabled(filteredData.size() > 0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser DesdeF;
    private com.toedter.calendar.JDateChooser DesdeF1;
    private javax.swing.JTable Tabla;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
